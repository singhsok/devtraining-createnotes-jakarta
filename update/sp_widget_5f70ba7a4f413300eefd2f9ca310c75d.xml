<?xml version="1.0" encoding="UTF-8"?><record_update table="sp_widget">
    <sp_widget action="INSERT_OR_UPDATE">
        <category>custom</category>
        <client_script><![CDATA[function($rootScope,$scope,spUtil) {
	/* widget controller */
	var c = this;
	c.selectItem = function(idx) {
		var id = c.data.notes[idx].sys_id;
		console.log('Note ID: ' + id);
		$rootScope.noteID = id;
		$rootScope.$emit('selectNote', id);
	}
	
	c.snNoteUpdate = function(name,sysID){

	
		
		for (var i=0;i<c.data.notes.length;i++){
			if(c.data.notes[i].sys_id == name.data.sys_id){
				if(name.data.record.note){
					c.data.notes[i].note = name.data.record.note.display_value;
				}
				if(name.data.record.title){
					c.data.notes[i].title = name.data.record.title.display_value;
				}
				c.server.update();

			}
		}
	}

	// Record removed from data object on the server and passed back to client
	c.snNoteDelete = function(sysID){

		c.server.get({
			action: 'snDeleteNote',
			noteID: sysID

		}).then(function(r){
			c.data.notes = r.data.notes;
		});

	}
	spUtil.recordWatch($scope, "x_snc_createnotes_note", "numberISNOTEMPTY", function(name) {
if(name.data.operation == "insert"){
                        c.server.refresh();
            }
                        // Calls a Client Script function to do the update and pass the updated data object
            // to the server.
            if(name.data.operation == "update"){
                        c.snNoteUpdate(name, name.data.sys_id);
            }
            // Calls a Client Script function which does the update on the server and passes
            // the updated data object back to the client.
            if(name.data.operation == "delete"){
                        c.snNoteDelete(name.data.sys_id);
            }
              }); 


// Record removed from data object on the client and passed to server
	
}]]></client_script>
        <controller_as>c</controller_as>
        <css/>
        <data_table>sp_instance</data_table>
        <demo_data/>
        <description/>
        <docs/>
        <field_list/>
        <has_preview>true</has_preview>
        <id>notes_list</id>
        <internal>false</internal>
        <link/>
        <name>Notes List</name>
        <option_schema>[{"name":"test_notes","section":"other","label":"Test Notes","type":"string"}]</option_schema>
        <public>false</public>
        <roles/>
        <script><![CDATA[(function() {
//create an array to populate with notes
data.notes = [];
var noteGR = new GlideRecord('x_snc_createnotes_note');
noteGR.addQuery('user', gs.getUser().getID());
noteGR.orderByDesc('sys_created_on');
noteGR.query();
while (noteGR.next()) {
var noteObj = {};
//use service portal helper method to get some display values
$sp.getRecordDisplayValues(noteObj, noteGR, 'number,title,sys_id');
//get the first 20 characters of the description
noteObj.note = noteGR.getValue('note').toString().slice(0,20);
//push the populated obj into the array
data.notes.push(noteObj);
}
            if (input) {
                        if (input.action == 'newNote') {
                                    var newNote = new GlideRecord('x_snc_createnotes_note');
                                    newNote.newRecord();
                                    var id = newNote.insert();
                                    data.noteID = id;
                                    data.newNote = {};
                                    $sp.getRecordValues(data.newNote,newNote,"title,note,sys_id");
 
                        }
                        if (input.action == 'snDeleteNote') {
                                    var delNote = new GlideRecord('x_snc_createnotes_note');
                                    // The notes record should already be gone.  Just
                                    // making sure it no longer exists.
                                    if(delNote.get(input.noteID)){
                                                delNote.deleteRecord();
                                    }
 
                        }
            }
            
}
)(); 
]]></script>
        <servicenow>false</servicenow>
        <sys_class_name>sp_widget</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2019-04-30 09:44:28</sys_created_on>
        <sys_id>5f70ba7a4f413300eefd2f9ca310c75d</sys_id>
        <sys_mod_count>103</sys_mod_count>
        <sys_name>Notes List</sys_name>
        <sys_package display_value="CreateNotes" source="x_snc_createnotes">df5fd9a5090232007f44e1046c8ff69f</sys_package>
        <sys_policy/>
        <sys_scope display_value="CreateNotes">df5fd9a5090232007f44e1046c8ff69f</sys_scope>
        <sys_update_name>sp_widget_5f70ba7a4f413300eefd2f9ca310c75d</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2019-05-08 16:21:27</sys_updated_on>
        <template><![CDATA[<div class="panel panel-default">
<div class="panel-heading clearfix">
<h3 class="panel-title pull-left">
${Notes}
</h3>
</div>
<div class="list-group">
<a class="list-group-item" ng-click="c.selectItem($index)"ng-repeat="note in data.notes">
<h4 class="list-group-item-heading">
{{note.title}}
</h4>
<p class="list-group-item-text">

  
  {{note.note}}
</p>
</a>
</div>
</div>]]></template>
    </sp_widget>
</record_update>
